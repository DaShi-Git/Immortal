#include "impch.h"
#include "VulkanCommon.h"

namespace Immortal
{
	namespace Vulkan
	{
		const char *ToString(VkFormat format)
		{
			switch (format)
			{
				XX(VK_FORMAT_R4G4_UNORM_PACK8);
				XX(VK_FORMAT_R4G4B4A4_UNORM_PACK16);
				XX(VK_FORMAT_B4G4R4A4_UNORM_PACK16);
				XX(VK_FORMAT_R5G6B5_UNORM_PACK16);
				XX(VK_FORMAT_B5G6R5_UNORM_PACK16);
				XX(VK_FORMAT_R5G5B5A1_UNORM_PACK16);
				XX(VK_FORMAT_B5G5R5A1_UNORM_PACK16);
				XX(VK_FORMAT_A1R5G5B5_UNORM_PACK16);
				XX(VK_FORMAT_R8_UNORM);
				XX(VK_FORMAT_R8_SNORM);
				XX(VK_FORMAT_R8_USCALED);
				XX(VK_FORMAT_R8_SSCALED);
				XX(VK_FORMAT_R8_UINT);
				XX(VK_FORMAT_R8_SINT);
				XX(VK_FORMAT_R8_SRGB);
				XX(VK_FORMAT_R8G8_UNORM);
				XX(VK_FORMAT_R8G8_SNORM);
				XX(VK_FORMAT_R8G8_USCALED);
				XX(VK_FORMAT_R8G8_SSCALED);
				XX(VK_FORMAT_R8G8_UINT);
				XX(VK_FORMAT_R8G8_SINT);
				XX(VK_FORMAT_R8G8_SRGB);
				XX(VK_FORMAT_R8G8B8_UNORM);
				XX(VK_FORMAT_R8G8B8_SNORM);
				XX(VK_FORMAT_R8G8B8_USCALED);
				XX(VK_FORMAT_R8G8B8_SSCALED);
				XX(VK_FORMAT_R8G8B8_UINT);
				XX(VK_FORMAT_R8G8B8_SINT);
				XX(VK_FORMAT_R8G8B8_SRGB);
				XX(VK_FORMAT_B8G8R8_UNORM);
				XX(VK_FORMAT_B8G8R8_SNORM);
				XX(VK_FORMAT_B8G8R8_USCALED);
				XX(VK_FORMAT_B8G8R8_SSCALED);
				XX(VK_FORMAT_B8G8R8_UINT);
				XX(VK_FORMAT_B8G8R8_SINT);
				XX(VK_FORMAT_B8G8R8_SRGB);
				XX(VK_FORMAT_R8G8B8A8_UNORM);
				XX(VK_FORMAT_R8G8B8A8_SNORM);
				XX(VK_FORMAT_R8G8B8A8_USCALED);
				XX(VK_FORMAT_R8G8B8A8_SSCALED);
				XX(VK_FORMAT_R8G8B8A8_UINT);
				XX(VK_FORMAT_R8G8B8A8_SINT);
				XX(VK_FORMAT_R8G8B8A8_SRGB);
				XX(VK_FORMAT_B8G8R8A8_UNORM);
				XX(VK_FORMAT_B8G8R8A8_SNORM);
				XX(VK_FORMAT_B8G8R8A8_USCALED);
				XX(VK_FORMAT_B8G8R8A8_SSCALED);
				XX(VK_FORMAT_B8G8R8A8_UINT);
				XX(VK_FORMAT_B8G8R8A8_SINT);
				XX(VK_FORMAT_B8G8R8A8_SRGB);
				XX(VK_FORMAT_A8B8G8R8_UNORM_PACK32);
				XX(VK_FORMAT_A8B8G8R8_SNORM_PACK32);
				XX(VK_FORMAT_A8B8G8R8_USCALED_PACK32);
				XX(VK_FORMAT_A8B8G8R8_SSCALED_PACK32);
				XX(VK_FORMAT_A8B8G8R8_UINT_PACK32);
				XX(VK_FORMAT_A8B8G8R8_SINT_PACK32);
				XX(VK_FORMAT_A8B8G8R8_SRGB_PACK32);
				XX(VK_FORMAT_A2R10G10B10_UNORM_PACK32);
				XX(VK_FORMAT_A2R10G10B10_SNORM_PACK32);
				XX(VK_FORMAT_A2R10G10B10_USCALED_PACK32);
				XX(VK_FORMAT_A2R10G10B10_SSCALED_PACK32);
				XX(VK_FORMAT_A2R10G10B10_UINT_PACK32);
				XX(VK_FORMAT_A2R10G10B10_SINT_PACK32);
				XX(VK_FORMAT_A2B10G10R10_UNORM_PACK32);
				XX(VK_FORMAT_A2B10G10R10_SNORM_PACK32);
				XX(VK_FORMAT_A2B10G10R10_USCALED_PACK32);
				XX(VK_FORMAT_A2B10G10R10_SSCALED_PACK32);
				XX(VK_FORMAT_A2B10G10R10_UINT_PACK32);
				XX(VK_FORMAT_A2B10G10R10_SINT_PACK32);
				XX(VK_FORMAT_R16_UNORM);
				XX(VK_FORMAT_R16_SNORM);
				XX(VK_FORMAT_R16_USCALED);
				XX(VK_FORMAT_R16_SSCALED);
				XX(VK_FORMAT_R16_UINT);
				XX(VK_FORMAT_R16_SINT);
				XX(VK_FORMAT_R16_SFLOAT);
				XX(VK_FORMAT_R16G16_UNORM);
				XX(VK_FORMAT_R16G16_SNORM);
				XX(VK_FORMAT_R16G16_USCALED);
				XX(VK_FORMAT_R16G16_SSCALED);
				XX(VK_FORMAT_R16G16_UINT);
				XX(VK_FORMAT_R16G16_SINT);
				XX(VK_FORMAT_R16G16_SFLOAT);
				XX(VK_FORMAT_R16G16B16_UNORM);
				XX(VK_FORMAT_R16G16B16_SNORM);
				XX(VK_FORMAT_R16G16B16_USCALED);
				XX(VK_FORMAT_R16G16B16_SSCALED);
				XX(VK_FORMAT_R16G16B16_UINT);
				XX(VK_FORMAT_R16G16B16_SINT);
				XX(VK_FORMAT_R16G16B16_SFLOAT);
				XX(VK_FORMAT_R16G16B16A16_UNORM);
				XX(VK_FORMAT_R16G16B16A16_SNORM);
				XX(VK_FORMAT_R16G16B16A16_USCALED);
				XX(VK_FORMAT_R16G16B16A16_SSCALED);
				XX(VK_FORMAT_R16G16B16A16_UINT);
				XX(VK_FORMAT_R16G16B16A16_SINT);
				XX(VK_FORMAT_R16G16B16A16_SFLOAT);
				XX(VK_FORMAT_R32_UINT);
				XX(VK_FORMAT_R32_SINT);
				XX(VK_FORMAT_R32_SFLOAT);
				XX(VK_FORMAT_R32G32_UINT);
				XX(VK_FORMAT_R32G32_SINT);
				XX(VK_FORMAT_R32G32_SFLOAT);
				XX(VK_FORMAT_R32G32B32_UINT);
				XX(VK_FORMAT_R32G32B32_SINT);
				XX(VK_FORMAT_R32G32B32_SFLOAT);
				XX(VK_FORMAT_R32G32B32A32_UINT);
				XX(VK_FORMAT_R32G32B32A32_SINT);
				XX(VK_FORMAT_R32G32B32A32_SFLOAT);
				XX(VK_FORMAT_R64_UINT);
				XX(VK_FORMAT_R64_SINT);
				XX(VK_FORMAT_R64_SFLOAT);
				XX(VK_FORMAT_R64G64_UINT);
				XX(VK_FORMAT_R64G64_SINT);
				XX(VK_FORMAT_R64G64_SFLOAT);
				XX(VK_FORMAT_R64G64B64_UINT);
				XX(VK_FORMAT_R64G64B64_SINT);
				XX(VK_FORMAT_R64G64B64_SFLOAT);
				XX(VK_FORMAT_R64G64B64A64_UINT);
				XX(VK_FORMAT_R64G64B64A64_SINT);
				XX(VK_FORMAT_R64G64B64A64_SFLOAT);
				XX(VK_FORMAT_B10G11R11_UFLOAT_PACK32);
				XX(VK_FORMAT_E5B9G9R9_UFLOAT_PACK32);
				XX(VK_FORMAT_D16_UNORM);
				XX(VK_FORMAT_X8_D24_UNORM_PACK32);
				XX(VK_FORMAT_D32_SFLOAT);
				XX(VK_FORMAT_S8_UINT);
				XX(VK_FORMAT_D16_UNORM_S8_UINT);
				XX(VK_FORMAT_D24_UNORM_S8_UINT);
				XX(VK_FORMAT_D32_SFLOAT_S8_UINT);
				XX(VK_FORMAT_UNDEFINED);
			default:
				return "VK_FORMAT_INVALID";
			}
		}

		const char *ToString(VkPresentModeKHR presentMode)
		{
			switch (presentMode)
			{
				XX(VK_PRESENT_MODE_MAILBOX_KHR);
				XX(VK_PRESENT_MODE_IMMEDIATE_KHR);
				XX(VK_PRESENT_MODE_FIFO_KHR);
				XX(VK_PRESENT_MODE_FIFO_RELAXED_KHR);;
				XX(VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR);
				XX(VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR);
			default:
				return "UNKNOWN_PRESENT_MODE";
			}
		}

		const char *ToString(VkImageUsageFlagBits imageUsage)
		{
			switch (imageUsage)
			{
				XX(VK_IMAGE_USAGE_TRANSFER_SRC_BIT);
				XX(VK_IMAGE_USAGE_TRANSFER_DST_BIT);
				XX(VK_IMAGE_USAGE_SAMPLED_BIT);
				XX(VK_IMAGE_USAGE_STORAGE_BIT);
				XX(VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT);
				XX(VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT);
				XX(VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT);
				XX(VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT);
				XX(VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM);
			default:
				return "UNKNOWN IMAGE USAGE FLAG";
			}
		}

		const char *ToString(VkSurfaceTransformFlagBitsKHR transform)
		{
			switch (transform)
			{
				XX(VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR);
				XX(VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR);
				XX(VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR);
				XX(VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR);
				XX(VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR);
				XX(VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR);
				XX(VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR);
				XX(VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR);
				XX(VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR);
				XX(VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR);
			default:
				return "[Unknown transform flag]";
			}
		}

		const char *ToString(VkCompositeAlphaFlagBitsKHR compositeAlpha)
		{
			switch (compositeAlpha)
			{
				XX(VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR);
				XX(VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR);
				XX(VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR);
				XX(VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR);
				XX(VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR);
			default:
				return "UNKNOWN COMPOSITE ALPHA FLAG";
			}
		}

		VkFormat SuitableDepthFormat(VkPhysicalDevice physicalDevice, bool depthOnly, const std::vector<VkFormat>& depthFormatPriorities)
		{
			VkFormat depthFormat{ VK_FORMAT_UNDEFINED };

			for (auto &format : depthFormatPriorities)
			{
				if (depthOnly && IsDepthOnlyFormat(format))
				{
					continue;
				}

				VkFormatProperties properties;
				vkGetPhysicalDeviceFormatProperties(physicalDevice, format, &properties);
				if (properties.optimalTilingFeatures & VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT)
				{
					depthFormat = format;
					break;
				}
			}

			if (depthFormat != VK_FORMAT_UNDEFINED)
			{
				IM_CORE_INFO(LOGB("选择了深度格式: {0}", "Depth format selected: {0}"), ToString(depthFormat));
				return depthFormat;
			}

			IM_CORE_ASSERT(false, LOGB("没有可用的深度格式", "No suitable depth format could be determined"));
			return Utils::NullValue<VkFormat>();
		}
	}
}